server {
    listen 80;
    listen [::]:80;
    # https://www.baeldung.com/linux/nginx-config-environment-variables
    server_name ${SERVER_NAME};

    # certbot will use this directory to validate the host
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ${SERVER_NAME};
    charset utf-8;
    server_tokens off;

    root ${WEB_DIR}/build;
    index index.html;

    # https://stackoverflow.com/questions/58215104/whats-the-neterr-http2-protocol-error-about
    proxy_max_temp_file_size 0;

    client_max_body_size 10m;

    location ${MEMO_URL} {
        try_files $uri $uri/ /index.html;
        add_header Cache-Control "no-cache";
    }

    location ${BLOG_URL} {
        try_files $uri $uri/ @backend;
    }

    location = / {
        return 301 ${BLOG_URL};
    }

    location /api {
        try_files $uri $uri/ @backend;
    }

    location /tasks {
        try_files $uri $uri/ @backend;
    }

    location /static {
        alias ${WEB_DIR}/static;
        add_header Cache-Control "public, max-age=31536000, immutable";
        expires max;
        etag on;

        # ...
        try_files $uri $uri/ @backend;
    }

    # https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-subrequest-authentication/
    location /uploads {
        alias ${UPLOADS_DIR};
        add_header Cache-Control "public, max-age=31536000, immutable";
        expires max;
        etag on;

        auth_request /api/auth;
        auth_request_set $auth_status $upstream_status;
    }

    location = /api/auth {
        internal;
        proxy_pass http://${API_ADDR}:${API_PORT};
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
    }

    location @backend {
        proxy_pass http://${API_ADDR}:${API_PORT};

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
    }

    # https config
    ssl_certificate /etc/letsencrypt/live/${SERVER_NAME}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${SERVER_NAME}/privkey.pem;

    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
    ssl_session_tickets off;

    ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    # intermediate configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # HSTS (ngx_http_headers_module is required) (63072000 seconds)
    add_header Strict-Transport-Security "max-age=63072000" always;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;

    # verify chain of trust of OCSP response using Root CA and Intermediate certs
    # `fullchain.pem` has included it already
    # ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;

    # replace with the IP address of your resolver
    # resolver 127.0.0.1;
}
